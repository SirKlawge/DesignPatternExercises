Notes from Head First Design Patterns:
    
    When you're designing your program, try to isolate the non-changing parts of the program from those that do 
    change.
    
    "Program to an interface" really means "Program to a supertype".
    
    When you make your compile time declarations, the left side of the assignment operator, try to always refer to 
    the interface/abstract class type rather than that of a concrete class.
    
    So let's say that you have an Animal superclass with a Dog and Cat subclass.  We know that both Dogs and Cats make 
    sounds, so rather than having the client do something like
        Animal d = new Dog();
        d.bark();
        
    which locks you into the particular implementation found in the Dog class, do something more general like
        Animal animal = new Dog();
        animal.makeSound();
        
    Where makeSound is an abstract method in Animal's interface.  This is another example of programming to an interface.
    Both Dog and Cat class override and provide implementation for makeSound().
    
    We can make this even better by not even using the new operator in the client:
        Animal a = getAnimal();
        a.makeSound();
        
    Where there's some other class that determines which runtime object a should refer to.
    
    Rather than thinking of the duck's behaviors as a set of bahaviors, think of them as a family of algorithms.
    
    Design Principle: favor composition over inheritance.  This gives you more flexibilty.
    
    The Duck example is an implementation of the Strategy Pattern.
    
    Strategy Pattern:
        defines a family of algorithms, encapsulates each of them, and makes them interchangable.  This lets the 
        algorithm vary independently from clients that use it.
        
    To be clear, the family of algorithms in the Duck example are FlyBehavior and QuackBahavior, and the concrete 
    classes that implemented these interfaces are the specific, individual algorithms. 
    
    
    Observer Pattern:
        When something changes, notify observers.
        
        The Weather-O-Rama has three components:
            The weather station that gathers weather data.
            The weather data object that tracks data coming from the weather station and updates displays
            The displays that shows the users the current weather.
            
            The three different display elements that we have to develop are:
                Current conditions (temp, humidity, pressure)
                Weather Statistics
                a simple forecast
                
            We want to make this expandable so that other developers can create new custom displays.
            
            If we notify our displays by referencing them specifically, then we're coding to implementation.  Which
            means that if we want to add or change a display, we have to change the code in the meansurementsChanged()
            method.
            
        
        The book uses the language of Subject/Observer.  The subject is the observable.  Remember the way you 
        implemented this in MVC: the View held an instance of the Model, and the view then called 
        model.addObserver(this);
        
        Formal definition of Observable pattern: a one-to-many dependency between objects such that when one 
        object changes state, all of its dependents are notified and updated automatically.
        
        Participants:
            
            Subject (Interface) - defines the interfaace through which Observers can subscribe or unsubscribe. Also 
            defines an notifyObservers method through which the Observable notifies Observers.
            
            ConcreteSubject - the Observable class that sends out notifications.
            
            Observer (interface) - defines the update method that will ultimately allow concrete classes to respond
            to notifications.
            
            ConcreteObserver - responds to notifications from Subjects via the update method.
            
        Sure, the subscribers enter into a relationship of dependence upon the Subject, but this is a loose coupling.
        They don't need to know implementation details about the Subject.  Really, they only ever see the output as 
        the Subject wishes to send.  And the Subject knows nothing about its Observers other than that they are 
        Observers.
        
        As a design principle, we should strive for loosely coupled designs between objects that interact.
        
        Java's swing library has listeners that its components can use to respond to various types of events that 
		occur on Swing components.
		
		The Observer/Observable classes in Java started to be phased out as of Java 9.
		People prefered to implement their own Observer/OBservable interfaces since they were able to customize 
		them.
		
		You could modify the Observer/Observable pattern so that rather than the Subject pushing it's updates to 
		the observers in a way that it chooses, you could have the Observers pull the information that they choose
		(so long as the Subject makes it available).  To do this:
			1) Have the subject provide the relevant getter methods
			2) Change the Subject's notifyObservers() to traverse the list of Observers and call update() but 
			with no parameters
			3) Change the observer interface so that update() method has no paramters.  Make the same change for 
			all concrete observers.
			4) Since each concrete observer holds a reference to the Subject, use the Subject's getters inside
			the update method to gather only the data that each concrete observer needs.
		
	
	THe Decorator Pattern:
		
		Decorator pattern will allow us to give objects new responsibilities and functionality without having to 
		change their unerlying classes.  We do this by making the object a component of a wrapper class.
		
		Let's say you have a coffee shop that offers a variety of beverages.  You could have an abstract Beverage
		class that other concrete beverages inherit, each of which overrides the abstract cost method.
		What results is a "class explosion", a rapid increase in the number of classes, as the menu grows.
		
		Design Principle: classes should be cloesd to change, but open to extension. 
		
		Instead of using inheritance, which locks its subclasses into whatever functionality the superclass 
		provides, we're gonna start with basic objects and wrap them into more complex objects.
		
			Start with a DarkRoast object.
			Decorate it with a Whip object
			Decorate it with a Mocha object
			Call the cost() method and rely on delegation (strategy?) to add up the condiments. (Maybe the costs
			are included in the Whip and Mocha wrappers)
			
		So all of the above classes, DarkRoast, Whip, Mocha, have a cost() method.  So how do we get these methods 
		to properly calculate the cost?  Answer: call cost() on the outermost decorator, and it'll delegate 
		computing the cost to the objects it decorates.
		
		Decorators have the same supertype as the objects they decorate.
		
		We can pass around a decorated object in place of original warpped object.
		
		Formal def of Decorator Pattern:
			attaches addition responsibilities to an object dynamically.
			
		Participants:
			AbstractComponent - the superclass that the concrete compoments and their wrappers/decorators 
			inherit
			
			ConcreteComponent - the object that we're going to dynamically add new behaviors to.
			
			Decorator - each decorator Has-A component that it wraps, that is, has it as a field.  This class
			is declared abstract, and the Component that it takes as a field is declared as the AbstractComponent 
			type described above: this way it can wrap any ConcreteComponent.
			
			ConcreteDecorator - inherit the Decorator, and it takes a concrete component and wraps it.
			
		The decorators inherit the same class as the beverages.  The primary reason for doing this isnt for the 
		sake of inheriting behavior, but for type matching: so that the decorators can be treated the same way in
		some respect as the things they decorate.
		
		The objects acquire new behavior not through inheritence, but through composition.
		
		Relying on inheritence makes it so behavor is determined statically at compile time.
		
		As you learned in class, Java's I/O classes is an example of the Decorator pattern.
		
		One of the downsides of the Decorator pattern is that you end up with a large menu of small classes, or 
		decorators, which can be overwhelming to developers.  
		
	Factory Pattern
	
		The Factory patterns offers alternative ways of instantiating objects in a way that reduces coupling between 
		classes.
		
		One way of instantiating objects is by having the client provide certain arguments, and then responding 
		having another class create objects based on the provided argument, probably done with a long if/else 
		decision tree.  But, when it comes time to make changes, you have to change existing code.
		
		Factories handle the details of object creation.  Anytime a client needs an object, it asks the Factory to 
		make one.
		
		The client class that uses the factory gets the Factory as a field.
		
		The Simple Factory Pattern isnt actually a design pattern; it's an idiom.
		
		The Participants for a simple Factory:
			ConcreteFactory - Makes products of a certain type.  Determines which concrete product type to make,
			
			AbstractProduct - An abstract type of product that declares the interface the concrete subclasses.
			
			ConcreteProduct - the subclasses of AbstractProduct that implement the interface defined by AbstractProduct
			
		What's the difference between the Simple and Abstract Factories?  The Abstract Factory adds an AbstractFactory,
		so that more than one type of ConcreteFactory may be defined.
		
		The AbstractFactory class has a concrete method that determines which of its products to instantiate.
		
		Factory methods might have a general signature like this:
			public abstract Product factoryMethod(String type);
			
		And you'll see this method declared in an abstract class.  The concrete classes that inherit this abstract 
		class will handle object creation.  Here's what the client needs to do to use the factory methods
		
			AbstractFactory product = new ConcreteFactory();
			
		This means that the client still needs to know the list of available concrete factories, and they still have
		to use the new keyword.  So the client is making objects, just not the concete objects.
        
        The Factory Method pattern encapsulates object creation by letting subclasses decide what objects to create.
        In the PizzaStore example, the subclasses refers to the Concrete PizzaStores.
        
        So in the Factory Pattern, you have the following participants:
            AbstractCreator - contains an abstract factory method which the concrete creators use to determine how 
            they're going to create objects.  Also contains concrete code common to all ConcreteCreators.
            
            ConcreteCreator - provides implementation for the factory method which determines how objects are made.
            
            AbstractProduct - declares the type of products that are produced by creators.
            
            ConcreteProducts - specific products that are of type AbstractProduct.
            
        Design Pricinciple: depend on abstractions, not on concrete classes.
            Our high level component should not depend on low-level components, rather they should both depend on 
            abstractions.
            
            In the pizza example, the Pizza store is a high-level component, and the pizza implementations are the 
            low-level components.  
            You don't want one pizza store producing all of the different concrete pizza, whether they be NY or 
            Chicago style or whatever.  This will mean one big if/else decision tree in the PizzaStore class 
            that determines which pizza to make.  This makes PizzaStore too dependent on the concrete classes.
            By using the Factory method pattern, we made the concrete PizzaStores only dependent on an abstract 
            Pizza class rather than all of the concrete Pizza classes.
            
            When you approach thinking about such a project, rather than start from a top-down approach in terms of 
            abstraction (thinking first about an abstract Pizza class then thinking about concrete pizza classes), 
            think first about all of the cocrete products you want to make, and find a commonality between them.  
            That commonality will be part of the interface that your concrete products all share.
            
            As a rule no variable should hold a reference to a concrete class. (recall in the pizza example, the
            concrete PizzaStores returned Pizzas with the factory method.  The client didn't need to know anything 
            about concrete products).
            
            As a rule, no class should derive from a concrete class.  That means depending on a concrete class rather 
            than an abstraction.
            
            As a rule, no method should override an implemented method of any of its base classes.
			
		An Abstract Factory provides an interface for a family of products.  We then write our code so that 
		it uses the factory to create products.
		
		The Abstract Factory Pattern: provides an interface for creating families of related or dependent objects 
		without specifying their concrete class.
		
	So What is a factory method?  It's a method in an abstract class or interface that is left abstract.  Subclasses,
	or users of the interface, provide an implementation for that factory method.  The subclasses then use the 
	factory method to return, or produce, the objects
            
	Singleton Pattern:
	For making one of a kind objects.
	
	Things you only need one of: 
		thread pools, caches, dialog boxes...
		
	The Singleton pattern gives us the benefits of a global varaible minus the downsides.
	The downsides of global variables:
		if you have an object as a global variable, it'll get instantiated when the application launches.  If 
		it's a resource intensive object and your application never ends up using it, it's wasteful.
		
	The singleton pattern allows us to create the singleton object only when it's needed.
	
	Things can go wrong if multiple threads access the instance at the same time.
	You can try to used the synchronized keyword for your getInstance() method, but each client only ever needs
	to call the method once.  I guess synchronization is expensive, so we want a workaround.
	
	1) if calling getInstance() isn't slowing your program down too much, then dont worry about it.
	
	2) If your application always creates and uses an instance of the singleton, then rather than creating it 
	in the getInstance() method, just create it at the same time you decalare it.  Then the getInstance method
	just returns the instance. Declare the singleton as a static member.  The JVM will automatically create a 
	unique instance of the singleton when the class is loaded, that is, it's created before any thread accesses 
	it.
	
	3) Double checked locking: code checks for an existing instance of the Singleton twice.
	
	public class Singleton {
		private volatile static Singleton singleton;
		
		private Singleton(){
		}
		
		public static Singleton getInstance(){
			if(singleton == null){ //First check
			//if you're here, then the singleton has not been made yet.
				synchronized (Singleton.class){ 
					if(singleton == null){ //synchronized check.  So only one can be made.  No race condition.
						singleton = new Singleton();
					}
				}
			}
			return singleton;
		}
	}
	
	Command Pattern:
		A way of encapsulating method invocation.
		
		Example: using one programmable remote to control multiple devices that have different interfaces.
		
		Decouple the requester of an action from the object that actually performs the action.
		Or it separates the object making a request from the objects that receive and execute those requests.
		
		The Command Design pattern:
			1) The client creates a Command object, which consists of a set of actions on a Receiver.
			2) The command object provides the execute() method which can be called to invoke the actions on the
			Receiver.  (So what's passed to this execute() method?  A String or enum that specifies which method
			to run at the receiver?) (Do in the diner example, the command is the order)
			3) The client calls setCommand() on the Invoker object and passes it the Command object.  (In the 
			diner example, is the waitress the Invoker object?)
			4) At some point in the future, the Invoker object calls the Command object's execute() method.
			5) 4) results in the actions being invoked on the receiver.
			
		Ok, so I was way off on the diner example:
			
			waitress -> Command
			short order cook -> execute()
			orderUp() -> Client
			Order -> Invoker
			Customer -> receiver
			takeOrder() -> setCommand()
			
		The Command Pattern encapsulates a request as an object, thereby letting you parameterize other objects 
		with different requests, queue or log requests, and support undoable operations.
		
		The command pattern packages the actions and the receiver into an object that exposes just one method: 
		execute.  When called, execute() causes the actions to be invoked on the receiver.
		
		Notice that the remote control doesn't care which particular ConcreteCommand was associated with the 
		button slot, it just cares that it's a Command, and thus it has an execute() method.  This is an example 
		of what it means to "parameterize an object with a command".  What gets parameterized is the command, 
		the button slot: it can take multiple differnt types so long as they are Commands. The button slot is
		the Invoker.  
		
		The Meta Command Pattern allows you to create macros of commands so that you can execute multiple commands 
		at once.
		
		Command Pattern Participants: 
			Client - Responsible for creating a ConcreteCommand and setting it's receiver (the command and the 
			object that performs that command).
			
			Invoker - holds a command and, at some point, asks the command to carry out a request by calling
			its execute() method.
			
			Receiver - The object that has a list of methods representing actions that it can perform.  Will there
			be a command object for each method that the receiver can perform?
			
			Command Interface - declares an interface for all the comamnds. It declares the execute() method, 
			and maybe an undo() method.
			
			ConcreteCommand - represents a single command that get's executed by the Invoker.  It holds a reference
			to the Receiver that it commands, and its implementation of execute calls the corresponding method 
			of the Receiver.
			
		How does this decouple the Invoker (the remote) from the Receiver? The invoker holds a reference to a 
		Command type, or a collection of Command types (for multiple commands using one object).  The invoker 
		calls the execute() method: a method guaranteed to be shared by all Command objects.  The command 
		objects in turn tell the receivers which method to call since they hold a reference to the receiver.
		
		